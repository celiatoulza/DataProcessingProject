<?php

namespace DataProcessingProjectBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{

	public function findByAuthor( $author ){

		$qb = $this->createQueryBuilder( 'a' );
		$qb->where( 'a.author = :author' )->setParameter( 'author', $author );

		return $qb->getQuery()->getResult();
	}

	public function getAdvertWithApplications(){

		$qb = $this
			->createQueryBuilder( 'a' )
			->leftJoin( 'a.applications', 'app' )
			->addSelect( 'app' );

		return $qb->getQuery()->getResult();
	}

	public function getAdvertWithCategories( array $categoryNames ){

		$qb = $this->createQueryBuilder( 'a' );
		$qb
			->join( 'a.categories', 'c', 'WITH', 'c.name = $category' )
			->addSelect( 'c' );
	
		return $qb->getQuery()->getResult();

	}

	// Cette fonction sert à récupérer toutes les annonces triées par date
	// elle prend en paramètre le numéro de la page et le nombre d'annonces à afficher par page
	public function getAdverts( $page, $nbPerPage ){

		$qb = $this->createQueryBuilder( 'a' );
		$qb
			->leftjoin( 'a.image', 'i' )
			->addSelect( 'i' )
			->leftjoin( 'a.categories', 'c' )
			->addSelect( 'c' )
			->orderBy( 'a.date', 'DESC' );	
		// le leftjoin permet d'avoir les annonces qui n'ont pas d'image et/ou pas de catégories
		
		$query=$qb->getQuery();

		$query->setFirstResult( ($page-1) * $nbPerPage );

		$query->setMaxResults( $nbPerPage );

		// on retourne l'objet Paginator correspondant à la requête construite
		return new Paginator( $query, true );
		
	}

	// renvoit un querybuilder pour les annonces publiées uniquement
	public function getPublishedQueryBuilder(){

		return $this
			->createQueryBuilder( 'a' )
			->where( 'a.published = :published' )
			->setParameter( 'published', true );
	}
}
